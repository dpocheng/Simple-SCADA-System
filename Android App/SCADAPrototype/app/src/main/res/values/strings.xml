<resources>
    <string name="app_name">Simple SCADA</string>
    <string name="title_activity_background">Background</string>
    <string name="action_settings">Settings</string>
    <string name="button1">Background</string>
    <string name="button2">Show All Records</string>
    <string name="button3">Search Keyword</string>
    <string name="sensor_string">Sensor</string>
    <string name="timestamp_string">Timestamp</string>
    <string name="area_string">Area</string>
    <string name="abstract_title">Abstract</string>
    <string name="abstract_content">A crucial first step in architecting a real-time search and data subscription system is to create formal definitions for real-time constraints on query and fetch operations. These real-time constraints define conditions for system success and failure, and are dependent on a number of hardware and software factors, including the network topology, system integration, and search architecture.

The purpose of this document is to describe the real-time constraints of a supervisory control and data acquisition (SCADA) system by defining the search problem, simulated topology, software architecture, and distributed component model of the system. Once these parameters are defined, an implementation schedule can be delineated for addressing these constraints and building a reliable SCADA prototype.
</string>
    <string name="problem_title">Problem</string>
    <string name="problem_content">A real-time SCADA system is defined as a search and subscription model, where query and data fetching results within a constant time frame of one second. For critical systems, such as in the case of a nuclear power plant or oil refinery, one second of system delay is the difference between safe operation and catastrophic failure. A software solution to this problem relies on the systemâ€™s ability to search and fetch data quickly across multiple nodes on a network, and present results in a format the operator can understand and act upon. Search performance and reliability has become the most critical demand for fulfilling growing data collection requirements and advancing forward in the industry.

A common problem with current vendors of SCADA software is the age and stability of their search and data collection systems. Market leader Wonderware, for example, is based on a dead distributed model called DCOM and built originally for Windows 2.0. Wonderware creates an exponentially growing network topology as nodes are added to the system, and attempts to index data by inserting new data into a relational database.

The system displays data in a tree view, but actually stores data linearly without ranking or indexing. This disorganization of data collectors with no proper means of indexing, searching, filtering eventually causes the system to slow and fail due to real-time constraints not being met. The approach described in this article defines how data can be indexed and ranked in a more optimized topology using next-generation search models.
</string>
    <string name="title_activity_show_records">Show All Records</string>
    <string name="action_refresh">Refresh</string>
    <string name="action_request">Request</string>

    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="title_activity_show_all_records_settings">Settings</string>

    <string name="pref_header_general">General</string>
    <string name="pref_index_label">Starting Position of Index</string>
    <string name="pref_index_key" translatable="false">from</string>
    <string name="pref_index_default" translatable="false">0</string>
    <string name="pref_size_label">Number of Records</string>
    <string name="pref_size_key" translatable="false">size</string>
    <string name="pref_size_default" translatable="false">20</string>
    <string name="title_activity_record_details">Device Info</string>

    <string name="device_header">Device Name:</string>
    <string name="sensor_header">Sensor Type:</string>
    <string name="area_header">Area:</string>
    <string name="temperature_header">Value:</string>
    <string name="timestamp_header">Timestamp:</string>
    <string name="title_activity_search_keyword">Search Keyword</string>

    <string name="empty_area">{Area} is required!</string>
    <string name="title_activity_search_results">Search Results</string>

    <string name="area_empty_warning">{Area} cannot be empty!</string>
    <string name="area_assign_warning">Please click next to assign the param!</string>
</resources>
